/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    
    int add = 0;    //檢查進位
    
    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {   //重點:每建一個節點就要要一次記憶體空間
        
        ListNode *l3;
        l3 = new ListNode();
        ListNode *curr = l3;                   //宣告另一個指標代替l3
        
        while((l1!=NULL)&&(l2!=NULL))
        {   
            curr->next = new ListNode();       //建立下一個節點
            curr->val = l1->val+l2->val;
            if(add==1){                        //如果有進位
                curr->val = curr->val+1;
                add = 0;
            }
            if((curr->val)>=10)                 //如果大於十則進位
            {
                curr->val = (curr->val)-10;
                add = 1;
            }
            curr = curr->next;
            l1 = l1->next;
            l2 = l2->next;
        }
        
        while(l1!=NULL)                          //如果剩l1沒掃完
        {
            curr->next = new ListNode();
            curr->val = l1->val;
            if(add==1){
                curr->val = curr->val+1;
                add = 0;
            }
            if((curr->val)>=10)
            {
                curr->val = (curr->val)-10;
                add = 1;
            }
            curr = curr->next;
            l1 = l1->next;
        }
        
        while(l2!=NULL)                        //如果剩l2沒掃完
        {
            curr->next = new ListNode();
            curr->val = l2->val;
            if(add==1){
                curr->val = curr->val+1;
                add = 0;
            }
            if((curr->val)>=10)
            {
                curr->val = (curr->val)-10;
                add = 1;
            }
            curr = curr->next;
            l2 = l2->next;
        }
        
        if(add==0)
        {
            curr = l3;
            while(curr->next->next!=NULL)
            {
                curr = curr->next;
            }
            curr->next = NULL;
        }
        
        if(add==1)
        {
            curr->val=1;
        }
        
        return l3;
    }
    
    
    /*ListNode* LinkReverse(ListNode *l0)  //多寫的沒用到
    {
        ListNode *curr = l0;
        ListNode *next = l0->next;
        l0->next = NULL;
        while(next!=NULL)
        {
            curr = next;
            next = next->next;
            curr->next = l0;
            l0 = curr;
        }  

        return l0;
    }*/
    
    
};
