/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        
        vector <int> vec ;
        
        if(lists.size()==0)
            return {};
        
        
        ListNode *node = new(ListNode);
        ListNode *head = node;
        
        for(int n =0;n<lists.size();n++) //每個元素跑一次
        {
            while(lists[n]!=NULL)
            {   
                vec.push_back(lists[n]->val);
                lists[n] = lists[n]->next;
            }
        }
        
        if(vec.size()==0)
            return {};
        
        sort(vec.begin(),vec.end());
        
        for(int i=0;i<vec.size();i++)
        {
            cout<<vec[i];
            
            node->val = vec[i];
            
            if(i<vec.size()-1)
            {
                node->next = new(ListNode);
                node = node->next;
            }
        }
       
        return head;
    }
};
