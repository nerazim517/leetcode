/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        
        if(list1==NULL)
            return list2;
        
        if(list2==NULL)
            return list1;
        
        ListNode *list3;
        list3 = new(ListNode);
        ListNode *now = list3;
        while((list1!=NULL)&&(list2!=NULL))
        {   
            
            if(list1->val<list2->val)
            {   
                list3->val = list1->val;
                list1 = list1->next;
            }
            else
            {   
                list3->val = list2->val;
                list2 = list2->next;
            }
            
            if((list1!=NULL)&&(list2!=NULL))
            {
            cout<<list3->val;
            list3->next = new(ListNode);
            list3 = list3->next;
            }
            
        }   
        
        
        if(list1!=NULL)
        {
            list3->next = list1;           
        }
        
        
        
        if(list2!=NULL)
        {
            list3->next = list2;
        }
        
        return now;        
    }
};
