/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {            //尋找nums中數字在linklist中出現的集合數
public:
    int numComponents(ListNode* head, vector<int>& nums) {
        unordered_map <int,int> mp;
        unordered_map <int,int> ans;
        int i = 0;
        int count =0;             
        while(head!=NULL)
        {
            mp[head->val]=i++;
            head = head->next;
        }
        for(int n=0;n<nums.size();n++)
        {
            if(mp.find(nums[n])!=mp.end())   //若有找到
            {
                ans[mp[nums[n]]]=1;         //在ans中記錄1
            }
            
            
        }
        for(int j=0;j<mp.size();j++)
        {
            if(ans[j]==1&&ans[j+1]!=1)    //看出現幾個1的集合
            {
                count++;          
            }
            
            cout<<ans[j];          //check ans
        }
        
        
        
        return count;
    }
};
