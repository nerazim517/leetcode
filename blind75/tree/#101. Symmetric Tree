/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {    //simply verify leftsubtree's left and rightsubtree's right & leftsubtree's right and rightsubtree's left
public:
    bool isSymmetric(TreeNode* root) {
        if(root==NULL)
            return true;
        TreeNode* lef = root->left;
        TreeNode* rig = root->right;
        return dfs(lef,rig);
    }
    bool dfs(TreeNode* lef,TreeNode* rig)
    {
        if((lef==NULL)&&(rig==NULL))
            return true;
        else if((lef==NULL)||(rig==NULL))
            return false;
        if((lef->val)==(rig->val))
        {
            return (dfs(lef->left,rig->right)&&dfs(lef->right,rig->left));
        }
        else
        {
            return false;     
        }
        
        return true;
    }
};
