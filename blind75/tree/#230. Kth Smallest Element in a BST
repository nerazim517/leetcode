/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        vector<int> ans = LDR(root);
        
        return ans[k-1];
    }
    
    vector<int> LDR(TreeNode* root)
    {   
        vector<int> ans;
        if(root==NULL)
            return ans;
        vector<int> leftt = LDR(root->left);
        for(int lef:leftt)
            ans.push_back(lef);
        
        ans.push_back(root->val);
        
        vector<int> rightt = LDR(root->right);
        for(int rig:rightt)
            ans.push_back(rig);
        
        return ans;
    }
    
    
};

--------------------------------------------------------------------------------(同樣想法，程式碼精簡版)------------------------------------------------------------------
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int kthSmallest(TreeNode* root, int k) {
        vector<int> ans;
        LDR(root,ans);
        
        
        return ans[k-1];
    }
    
    void LDR(TreeNode* root,vector<int> &vec)
    {
        
        if(root->left)
            LDR(root->left,vec);
        
        vec.push_back(root->val);
        
        if(root->right)
            LDR(root->right,vec);
        
    }
    
};
