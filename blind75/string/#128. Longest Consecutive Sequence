class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        unordered_map<int,bool> mp;
        int ans = 0;
        for(int i:nums)
            mp[i] = true;
        for(int i=0;i<nums.size();i++)
        {
            if(mp[nums[i]]==true)
            {
                int temp1 = nums[i]+1;
                int temp2 = nums[i]-1;
                
                int count = 1;
                
                while(mp[temp1++]==true)
                {   
                    mp[temp1-1] = false;
                    count ++;
                }
                
                while(mp[temp2--]==true)
                {
                    mp[temp2+1] = false;
                    count ++;
                }
                mp[nums[i]]=false;
                ans = max(ans,count);
            }
            
        }
        return ans;
    }
};



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class Solution {
public:
    int longestConsecutive(vector<int>& nums) {
        
        if(nums.size()<=1)
            return nums.size();
        
        sort(nums.begin(),nums.end());
        
        int ans = 0;
        int count = 1;
        for(int i =0;i<nums.size();i++)
        {   
            if(i==nums.size()-1)
                return max(ans,count);
            
            if(nums[i]==nums[i+1])
                continue;
            else if(nums[i]+1==nums[i+1])
            {
                count ++;
            }
            else
            {   
                ans = max(ans,count);
                count =1;
            }
            
        }
        
        
        
        return ans;
        
        
        
    }
};
