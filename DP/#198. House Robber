class Solution {
public:
    int rob(vector<int>& nums) {
        int dp[100];
        dp[0] = nums[0];
        if((nums.size()-1)==0)
            return dp[0];
        dp[1] = nums[1];
        
        if(nums.size()>2)
            dp[2] = max(nums[0]+nums[2],nums[1]);
        
        for(int i=3;i<=nums.size()-1;i++)
        {
            dp[i] = nums[i]+max(dp[i-2],dp[i-3]);            //考慮前2 3間哪間高 
        }   
        return max(dp[nums.size()-1],dp[nums.size()-2]);
    }
    
};
---------------------------------------------------------------------------------------------
class Solution {                         //改良版，第i間 = max(第i-1間,第i-2間+nums[i])
public:
    int rob(vector<int>& nums) {        
        vector<int> dp(nums.size());    //用小括號宣告大小才可以直接付值
        dp[0] = nums[0];
        
        if(nums.size()==1)
            return dp[0];
        
        dp[1] = max(nums[0],nums[1]);
        
        for(int i=2;i<nums.size();i++)
            dp[i] = max(dp[i-1],dp[i-2]+nums[i]);
        
        return dp[nums.size()-1];
    }
    
};
