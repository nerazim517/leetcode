class Solution {           //dp[i] = dp[i-1]+dp[i-2](最後兩個數小於26) or dp[i] = dp[i-1](最後兩個數大於26) 
public:                    //邊界條件很麻煩
    int numDecodings(string s) {
        vector<int> dp(s.size());//存前i個數的最佳解
        
        if(s[0]=='0')
            return 0;
        
        if(s.size()==1)
            return 1;
        else if(s.size()==0)
            return 0;  
        
        if(s[0]=='0')
            return 0;
        else
            dp[0] = 1;
        
        if(s[1]=='0')
        {   
            if(s[0]=='0')
                return 0;
            else if(s[0]>'2')
                return 0;
            else if((s[0]=='1')||(s[0]=='2'))
                dp[1] = 1;
        }
        else if(s[0]=='1') //s[1]!=0
        {
            dp[1] = 2;
        }
        else if(s[0]=='2') //s[1]!=0
        {
            if(('1'<=s[1])&&(s[1]<='6'))
                dp[1] = 2;
            else
                dp[1] = 1;
        }
        else
            dp[1] = 1;
        
        cout<<"123";
        
        for(int i=2;i<s.size();i++)
        {
            if(s[i]=='0')
            {
                if(s[i-1]=='0')
                    return 0;
                else if(s[i-1]>='3')
                    return 0;
                else if((s[i-1]=='1')||(s[i-1]=='2'))
                    dp[i] = dp[i-2];
            }
            else if(s[i-1]=='0')//s[i]!=0
            {   
                if(i==2)
                {
                    dp[i] = 1;
                }
                else
                    dp[i] = dp[i-3];
            }
            else if(s[i-1]=='2')//s[i]!=0 s[i-1]!=0
            {
                if(s[i]>='7')
                    dp[i] = dp[i-1];
                else
                    dp[i] = dp[i-1] + dp[i-2];
            }
            else if(s[i-1]=='1')
            {
                dp[i] = dp[i-1] + dp[i-2];
            }
            else
                dp[i] = dp[i-1];
        }
        
            
        
        
        return dp[dp.size()-1];
    }
};
