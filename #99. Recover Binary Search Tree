/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> vec;
    int i = 0;
    void recoverTree(TreeNode* root) {
        TreeNode* copy = root;
        dfs1(root);
        sort(vec.begin(),vec.end(),[](int a,int b){return a<b;});
        dfs2(root);
    }
    void dfs1(TreeNode* root)
    {
        if(root==NULL)
            return;
        else
            vec.push_back(root->val);
        dfs1(root->left);
        dfs1(root->right);
    }
    void dfs2(TreeNode* root)
    {
        if(root==NULL)
            return;
        else
        {
            dfs2(root->left);
            root->val = vec[i++];
            dfs2(root->right);
        }
    }
};
