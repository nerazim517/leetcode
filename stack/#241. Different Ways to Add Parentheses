class Solution {
public:
    vector<int> ans;
    vector<int> diffWaysToCompute(string expression) {
        dfs(expression,0,{},{});
        
        return ans;
    }
    
    void dfs(string s,int index,stack<int> s1,stack<char> s2)
    {   
        if(index==s.size())
        {   
            if(s1.size()==1)
                ans.push_back(s1.top());
            return;
        }
        if((int('0')<=int(s[index]))&&(int(s[index])<=int('9')))
        {
            stack <int> st;
            while((int('0')<=int(s[index]))&&(int(s[index])<=int('9')))
            {
                st.push(int(s[index])-int('0'));
                index++;
            }
            int temp = 1;
            int num = 0;
            while(!st.empty())
            {
                num +=st.top()*temp;
                st.pop();
                if(!st.empty())
                    temp*=10;
            }
            s1.push(num);
            
            while(!s2.empty())
            {   
                dfs(s,index,s1,s2);
                int r = s1.top();
                s1.pop();
                int l = s1.top();
                s1.pop();
                char op = s2.top();
                s2.pop();
                
                switch(op)
                {
                    case '+':
                        s1.push(l+r);
                        break;
                    case '-':
                        s1.push(l-r);
                        break;
                    case '*':
                        s1.push(l*r);
                        break;
                }
                
            }
            
            dfs(s,index,s1,s2);
        }
        else
        {   
            
            s2.push(s[index]);
            
            dfs(s,index+1,s1,s2);
        }
    }
    
};
