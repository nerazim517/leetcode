class Solution {
public:
    string convert(string s, int numRows) {
        
        if(numRows==1)
            return s;
        
        int num = numRows*2-1;
        string ans ="";
        if(s.size()<num)
        {
            for(int i=s.size();i<num;i++)
            {
                s+="*";
            }
        }
        else
        {
            int remain = s.size()-num;
            int a = remain%(num-1);
            cout<<a;
            if(a!=0)
            {
                int b = num-a-1;
                for(int i=0;i<b;i++)
                {
                    s+="*";
                }
            }
        }
        
        queue <int> q;
        unordered_map<int,bool> mp;
        
        for(int i=0;i<s.size();i+=(numRows-1)*2)
        {   
            mp[i] = true;
            if(s[i]!='*')
                ans+=s[i];
            if((mp[i-1]!=true)&&(i-1>=0))
                q.push(i-1);
            if((mp[i+1]!=true)&&(i+1<s.size()))
                q.push(i+1);
        }
        while(!q.empty())
        {   
            if(mp[q.front()]==false)
            {
                mp[q.front()]=true;
                if(s[q.front()]!='*')
                    ans+=s[q.front()];
            }
            if((mp[q.front()-1]==false)&&(q.front()-1>=0))
                q.push(q.front()-1);
            if((mp[q.front()+1]==false)&&(q.front()+1<s.size()))
                q.push(q.front()+1);

            q.pop();
        }
        
        
        
        return ans;
    }
};
