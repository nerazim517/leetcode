class Solution {
public:
    int ans = 0;
    int islandPerimeter(vector<vector<int>>& grid) {
        for(int i=0;i<grid.size();i++)
        {
            for(int j=0;j<grid[i].size();j++)
            {
                if(grid[i][j]==1)
                {
                    dfs(grid,i,j);
                }
            }
        }
        return ans;
    }
    void dfs(vector<vector<int>>& grid,int i,int j)
    {
        grid[i][j]=2;
        if(i==0)
            ans++;
        if(i==grid.size()-1)
            ans++;
        if(j==0)
            ans++;
        if(j==grid[0].size()-1)
            ans++;
        if(i-1>=0)
        {
            if(grid[i-1][j]==0)
            {
                ans++;
            }
            else if(grid[i-1][j]==1)
            {
                dfs(grid,i-1,j);
            }
        }
        if(i+1<grid.size())
        {
            if(grid[i+1][j]==0)
            {
                ans++;
            }
            else if(grid[i+1][j]==1)
            {
                dfs(grid,i+1,j);
            }
        }
        if(j-1>=0)
        {
            if(grid[i][j-1]==0)
            {
                ans++;
            }
            else if(grid[i][j-1]==1)
            {
                dfs(grid,i,j-1);
            }
        }
        if(j+1<grid[0].size())
        {
            if(grid[i][j+1]==0)
            {
                ans++;
            }
            else if(grid[i][j+1]==1)
            {
                dfs(grid,i,j+1);
            }
        }
    }
};
