class Solution {
public:
    vector<vector<int>> ans;
    vector<int> vec;
    
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        sort(candidates.begin(),candidates.end());
        dfs(target,candidates,0);
        return ans;
    }
    void dfs(int remain,vector<int>& nums,int index)
    {
        if(remain==0)
        {   
            ans.push_back(vec);
            return;
        }
        for(int i=index;i<nums.size();i++)
        {   
            if((i>index)&&(nums[i]==nums[i-1])) //去除重複的關鍵步驟，以免加入重複的數組，加入(i>index)防止多砍掉應有的(例:112)
                continue;
            if(nums[i]<=remain)
            {
                vec.push_back(nums[i]);
                dfs(remain-nums[i],nums,i+1);
                vec.pop_back();
            }
            
        }
        
    }
};
