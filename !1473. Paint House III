class Solution { //DFS TLE
public:
    int minn = INT_MAX;
    int minCost(vector<int>& houses, vector<vector<int>>& cost, int m, int n, int target) {
        dfs(houses,cost,m,n,target,0,0,0,0);
        
        if(minn==INT_MAX)
            return -1;
        
        for(int i=0;i<houses.size();i++)
        {
            if(houses[i]!=0)
            {
                minn -= cost[i][houses[i]-1];
            }
        }
        return minn;
    }
    void dfs(vector<int>& houses,vector<vector<int>>& cost,int m,int n ,int tar,int k,int d,int total,int prev)
    {   
        
        if((k==tar)&&(d==m))
        {   
           
            minn = min(minn,total);
            return;
        }
        else if((k>tar)||(d>=houses.size()))
            return;
        else
        {
            
            if(houses[d]!=0)
            {   
                
                if(d==0)
                {   
                    
                    dfs(houses,cost,m,n,tar,k+1,d+1,total+cost[d][houses[d]-1],houses[d]-1);
                    
                }
                else if(houses[d]-1!=prev)//跟上一間顏色不同
                {   
                    
                   
                    dfs(houses,cost,m,n,tar,k+1,d+1,total+cost[d][houses[d]-1],houses[d]-1);
                    
                }
                else
                {   
                    
                    dfs(houses,cost,m,n,tar,k,d+1,total+cost[d][houses[d]-1],houses[d]-1);
                    
                }
                    
            }
            else
            {   
                for(int i=0;i<n;i++)
                {   
                    if(d==0)
                    {   
                        
                        
                        dfs(houses,cost,m,n,tar,k+1,d+1,total+cost[d][i],i);
                        
                    }
                    else if(i!=prev)
                    {   
                        
                        
                        dfs(houses,cost,m,n,tar,k+1,d+1,total+cost[d][i],i);
                        
                    }
                    else
                    {   
                        
                        dfs(houses,cost,m,n,tar,k,d+1,total+cost[d][i],i);
                        
                    }
                }
            }
        }
    }
};
