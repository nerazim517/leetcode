class Solution {
public:
    int len = 0;
    unordered_map<string,bool> mp;
    bool makesquare(vector<int>& matchsticks) {
        if(matchsticks.size()<4)
            return false;
        int edge = 0;
        for(int i:matchsticks)
            edge+=i;
        if(edge%4!=0)
            return false;
        len = edge/4;
        sort(matchsticks.begin(),matchsticks.end(),greater<int>());
        int x = matchsticks[0];
        int y = matchsticks[1];
        int z = matchsticks[2];
        int u = matchsticks[3];
        if((x>=y)&&(y>=z)&&(z>=u)&&((u>=len/2)))
        {
            int i = 4;
            while(i--)
                matchsticks.erase(matchsticks.begin());
       
            return dfs(matchsticks,0,x,y,z,u);
        }
        if((x>=y)&&(y>=z)&&((z>=len/2)))
        {
            int i = 3;
            while(i--)
                matchsticks.erase(matchsticks.begin());
       
            return dfs(matchsticks,0,x,y,z,0);
        }
        if((x>=y)&&((y>=len/2)))
        {
            int i = 2;
            while(i--)
                matchsticks.erase(matchsticks.begin());
       
            return dfs(matchsticks,0,x,y,0,0);
        }
        matchsticks.erase(matchsticks.begin());
        return dfs(matchsticks,0,x,0,0,0);
    }
    bool dfs(vector<int>& m,int index,int side1,int side2,int side3,int side4)
    {
        if((side1>len)||(side2>len)||(side3>len)||(side4>len))
        {   
            return false;
        }
        else if((side1==len)&&(side2==len)&&(side3==len)&&(side4==len))
        {
            return true;
        }
        
        return dfs(m,index+1,side1+m[index],side2,side3,side4)||dfs(m,index+1,side1,side2+m[index],side3,side4)||dfs(m,index+1,side1,side2,side3+m[index],side4)||dfs(m,index+1,side1,side2,side3,side4+m[index]);
        
    }
};
