/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    vector<int> ans;
    multiset <pair<int,int>> m;
    int u = 1;
    vector<int> findFrequentTreeSum(TreeNode* root) {
        dfs(root);
        for(auto i = m.begin();i!=m.end();i++)
        {
            if((*i).second==u)
            {
                ans.push_back((*i).first);
            }
        }
        return ans;
    }
    int dfs(TreeNode* root)
    {
        if(root==NULL)
            return 0;
        else
        {
            int l = dfs(root->left);
            int r = dfs(root->right);
            int sum = root->val+l+r;
            
            bool b = false;
            for(auto i = m.begin();i!=m.end();i++)
            {
                if(i->first==sum)
                {
                    b = true;
                    pair<int,int> z;
                    z.first = (*i).first;
                    z.second = (*i).second+1;
                    u = max(u,z.second);
                    m.erase(i);
                    m.insert(z);
                    break;
                }
            }
            if(!b)
            {
                pair<int,int> p;
                p.first = sum;
                p.second = 1;
                m.insert(p);
            }
            
            return sum;
        }
    }
};
