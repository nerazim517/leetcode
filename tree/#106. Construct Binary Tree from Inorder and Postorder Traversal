/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) {
        return dfs(inorder,postorder,postorder.size()-1,0,postorder.size()-1);
    }
    TreeNode* dfs(vector<int>& in, vector<int>& post , int start , int end , int index)
    {
        if(start < end)
        {   
            return NULL;
        }
        int k = post[index];
        TreeNode* root = new TreeNode(k);
        root->val = k;
 
        int i;
        int count = 0;
        for(i=start;i >= end;i--)//i不能再重複宣告，會出錯，要debug很久...
        {   
            
            count++;
            if(in[i]==k)
            {
                break;
            }
        }

        root->right = dfs(in,post,start,i+1,index-1);
        
        root->left = dfs(in,post,i-1,end,index-count);
     
        return root;
    }
};
