/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {               
public:
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        return dfs(preorder,inorder,0,preorder.size()-1,0);
    }
    
    TreeNode* dfs(vector<int>& preorder,vector<int>& inorder,int start,int end,int lstart)   //比對範圍preorder中的第一個字(位置存在lstart)在inorder中哪裡，把inorder分成左右集合，不斷遞迴  
    {   
        if(start>end)
            return NULL;
        int k = preorder[lstart];
        TreeNode* root = new TreeNode;
        root->val = k;
        cout<<k;
        int i;
        int count = 0;
        for(i=start;i<=end;i++)
        {   
            count++;
            if(inorder[i]==k)
                break;
        }
        root->left = dfs(preorder,inorder,start,i-1,lstart+1);
        root->right = dfs(preorder,inorder,i+1,end,lstart+count);
        
        return root;
    }
};
