/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> children;

    Node() {}

    Node(int _val) {
        val = _val;
    }

    Node(int _val, vector<Node*> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
public:
    vector<vector<int>> ans;
    vector<vector<int>> levelOrder(Node* root) {
        if(root==NULL)
            return {};
        queue <Node*> q;
        q.push(root);
        dfs(q);
        return ans;
    }
    void dfs(queue <Node*> q)
    {   
        queue <Node*> qq;
        vector<int> v;
        bool b = false;
        while(!q.empty())
        {
            Node* n = q.front();
            q.pop();
            if(!n->children.empty())
            {
                for(Node* o :n->children)
                {
                    qq.push(o);
                    cout<<o->val;
                }
            }
            v.push_back(n->val);
            b = true;
        }
        if(b)
        {
            ans.push_back(v);
            dfs(qq);
        }  
    }
};
