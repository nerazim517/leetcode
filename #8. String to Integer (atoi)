class Solution {
public:
    int myAtoi(string s) {               //思路:用ascii code+大量if判斷，最後再考慮邊界條件
        
        vector <int> vec;
        long int ans =0;
        int j = 0; //還原vec用
        
        int flag = 0; //正0 負1
        
        int flag2 = 0; //用來check前面是否出現過數字
        
        for(int i=0;i<s.size();i++)//s每個字元掃一次
        {   
            
            if(int(s[i])==int('-'))
                flag = 1;
            
            if(int(s[i])==int(' '))                               //如果這個位元是空格
                if(int(s[i+1])!=int(' '))                         //如果下個位元不是空格
                    if((int('0')>int(s[i+1]))||(int(s[i+1])>int('9')))       //如果下個位元不是0-9
                        if(int(s[i+1])!=int('-'))                              //如果下個位元不是-
                            if(int(s[i+1])!=int('+'))                    //如果下個位元不是+
                                if(flag2 == 0)                        //如果前面沒出現過數字，eg:' .'
                                {
                                    cout<<"case1";                     //則結束
                                    return 0;
                                }
                                
                        
            if((int('0')<=int(s[i]))&&(int(s[i])<=int('9')))
            {
                vec.push_back(int(s[i])-int('0'));
                flag2 = 1; 
                if((int('0')>int(s[i+1]))||(int(s[i+1])>int('9')))
                {
                    
                    break;
                }       
            }
            
            if(int(s[i])!=int(' '))
                if((int('0')>int(s[i]))||(int(s[i])>int('9')))
                    if(int(s[i])!=int('-'))
                        if(int(s[i])!=int('+'))
                            break;
            
            if(int(s[i])==int('+'))
                if((int('0')>int(s[i+1]))||(int(s[i+1])>int('9')))
                    break;
            
            if(int(s[i])==int('-'))
                if((int('0')>int(s[i+1]))||(int(s[i+1])>int('9')))
                    break;
            
        }
        
        
        
        for(int n=0;n<vec.size();n++) //check vec 內容
            cout<<vec[n];
        
        cout<<endl;
        
        for(int i = vec.size()-1;i>=0;i--)
        {   
               
            
            if((ans + vec[i]*pow(10,j)>long(pow(2,31)-1)))
            {
                cout<<"case1";
                if(flag==0)
                    return long(pow(2,31)-1);
                if(flag==1)
                    return -1*long(pow(2,31));
            }
                
            if((ans>long(pow(2,31)-1)))
                break;
                
            if((ans<-1*long(pow(2,31))))
                break;
            
            ans = ans + vec[i]*pow(10,j);
            
            
            
            j = j + 1;
        }
        
        cout<<ans;
        
        if(flag==1)
            ans = ans*-1;
        
        
        
        if(ans>long(pow(2,31)-1))
            return long(pow(2,31)-1);
            
        if(ans<-1*long(pow(2,31)))
            return -1*long(pow(2,31));
         
        return ans;
    }
};
