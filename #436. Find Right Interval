class Solution {
public:
    vector<int> findRightInterval(vector<vector<int>>& intervals) {
        
        vector<int> ans;
        if(intervals.size()==1)
        {
            ans.push_back(-1);
            return ans;
        }
        vector<int> test = intervals[1];
        unordered_map <int,int> mp;
        int p = 0;
        for(vector<int> v:intervals)
        {
            mp[v[0]] = p++;
        }
        vector<vector<int>> vec;
        vec = intervals;
        sort(vec.begin(),vec.end());
        
        unordered_map <int,int> mp2;
        
        for(int i=0;i<vec.size()-1;i++)
        {
            int z;
            for(z = vec[i][0];z<=vec[vec.size()-1][0];z++)
            {   
                
                if(z>=vec[i][1])
                {   
                    if((mp[z]==0)&&(z!=intervals[0][0]))
                        continue;
                    break;
                }
                else if((z==vec[vec.size()-1][0])&&(z<vec[i][1]))
                {
                    z = INT_MIN;
                    break;
                }
            }
            
            mp2[vec[i][0]] = z;
        }
        
        int s = vec[vec.size()-1][0];
        
        for(vector<int> o:intervals)
        {
            
            if(o[0]==s)
                ans.push_back(-1);
            else if(mp2[o[0]]==INT_MIN)
                ans.push_back(-1);
            else
            {
                int y = mp[mp2[o[0]]];
                ans.push_back(y);
            }
        }
        
        return ans;
    }
};
