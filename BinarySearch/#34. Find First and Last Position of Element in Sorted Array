class Solution { //分兩次，一次找左邊，一次找右邊 Time Complexity:2O(log n) = O(log n)
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int low = 0;
        int high = nums.size()-1;
        vector<int> ans(2);
        int minn = INT_MAX;
        bool res = false;
        while(low<=high)
        {
            int mid = (low+high)/2;
            if(target==nums[mid])
            {
                minn = min(minn,mid);
                res = true;
            }
            if(target>nums[mid])
            {
                low = mid+1;
            }
            else
            {
                high = mid-1;
            }
        }
        if(res)
            ans[0] = minn;
        else
            ans[0] = -1;
        
        low = 0;
        high = nums.size()-1;
        int maxx = -1;
        
        while(low<=high)
        {
            int mid = (low+high)/2;
            if(target==nums[mid])
                maxx = max(maxx,mid);
            if(target>=nums[mid])
            {
                low = mid+1;
            }
            else
            {
                high = mid-1;
            }
        }
        
        
        
        ans[1] = maxx;
        
        return ans;
    }
};
